// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  offline
  online
  away
}

enum FriendshipStatus {
  pending
  accepted
  blocked
}

enum ChatRole {
  member
  admin
}

enum FileType {
  // Images
  IMAGE_JPEG
  IMAGE_PNG
  IMAGE_GIF
  IMAGE_WEBP
  IMAGE_SVG

  // Documents
  PDF
  DOC
  DOCX
  XLS
  XLSX
  TXT
  HTML
  CSS
  CSV

  // Audio
  AUDIO_MP3
  AUDIO_WAV
  AUDIO_M4A

  // Video
  VIDEO_MP4
  VIDEO_WEBM

  // Archives
  ZIP
  RAR

  // Other
  OTHER
}

enum MessageStatus {
  sent
  delivered
  seen
  failed
}

enum MessageType {
  user
  system
}

model User {
  userId         String   @id @default(uuid()) @db.Uuid
  username       String   @db.VarChar(50)
  email          String   @unique @db.VarChar(200)
  title          String?  @db.VarChar(100)
  createdAt      DateTime @default(now()) @db.Timestamp(6)
  profilePicture String?  @db.VarChar(250)
  bio            String?  @db.VarChar(500)

  lastActive DateTime   @default(now()) @db.Timestamp(6)
  userStatus UserStatus @default(offline)

  ChatRoomMember  ChatRoomMember[]
  Friendships1    Friendship[]      @relation("User1Friendships")
  Friendships2    Friendship[]      @relation("User2Friendships")
  Sender          Friendship[]      @relation("senderFriendships")
  BlockedUser     Friendship[]      @relation("blockedUserFriendships")
  MessageReaction MessageReaction[]
  RecentActivity  RecentActivity?
  ChatRoom        ChatRoom[]
  Message         Message[]
  RefreshTokens   RefreshTokens[]
  TokenFamily     TokenFamily[]

  @@index([email])
  @@index([lastActive])
}

model ChatRoom {
  chatRoomId    String   @id @default(uuid()) @db.Uuid
  isGroup       Boolean  @default(false)
  roomName      String?  @db.VarChar(100)
  createdAt     DateTime @default(now()) @db.Timestamp(6)
  lastActivity  DateTime @default(now()) @db.Timestamp(6)
  lastMessageId String?  @db.Uuid
  createdBy     String?  @db.Uuid
  roomImage     String?

  Messages       Message[] // One-to-many relationship with messages
  ChatRoomMember ChatRoomMember[]

  lastMessage Message?     @relation("LastMessage", fields: [lastMessageId], references: [messageId])
  creator     User?        @relation(fields: [createdBy], references: [userId])
  Attachment  Attachment[]

  @@index([lastActivity])
}

model Message {
  messageId       String        @id @default(uuid()) @db.Uuid
  chatRoomId      String        @db.Uuid
  senderId        String?       @db.Uuid
  content         String        @db.VarChar(2000)
  parentMessageId String?       @db.Uuid
  createdAt       DateTime      @default(now()) @db.Timestamp(6)
  isDeleted       Boolean       @default(false)
  isEdited        Boolean       @default(false)
  type            MessageType   @default(user)
  status          MessageStatus @default(sent)

  // Relations
  chatRoom      ChatRoom @relation(fields: [chatRoomId], references: [chatRoomId], onDelete: Cascade)
  sender        User?    @relation(fields: [senderId], references: [userId], onDelete: Cascade)
  parentMessage Message? @relation("MessageReplies", fields: [parentMessageId], references: [messageId])

  Replies         Message[]         @relation("MessageReplies")
  Attachment      Attachment[]
  MessageReceipt  MessageReceipt[]
  MessageReaction MessageReaction[]

  LastMessageFor ChatRoom[] @relation("LastMessage")
}

model Attachment {
  filePath String   @db.VarChar(255)
  fileType FileType
  fileName String   @db.VarChar(200)
  fileSize Int

  createdAt  DateTime @default(now()) @db.Timestamp(6)
  messageId  String   @db.Uuid
  chatRoomId String   @db.Uuid

  message  Message  @relation(fields: [messageId], references: [messageId], onDelete: Cascade)
  chatRoom ChatRoom @relation(fields: [chatRoomId], references: [chatRoomId], onDelete: Cascade)

  @@id([filePath])
  @@index([messageId])
}

model MessageReceipt {
  lastReadMessageId String   @db.Uuid
  userId            String   @db.Uuid
  chatRoomId        String   @db.Uuid
  readAt            DateTime @default(now()) @db.Timestamp(6)

  message        Message        @relation(fields: [lastReadMessageId], references: [messageId], onDelete: Cascade)
  chatRoomMember ChatRoomMember @relation(fields: [userId, chatRoomId], references: [userId, chatRoomId])

  @@id([userId, chatRoomId])
  @@unique([userId, chatRoomId])
  @@index([readAt])
}

model Friendship {
  friendshipId  String           @id @default(uuid()) @db.Uuid
  userId1       String           @db.Uuid // Foreign key referencing User
  userId2       String           @db.Uuid // Foreign key referencing User
  status        FriendshipStatus @default(pending)
  senderId      String           @db.Uuid
  blockedUserId String?          @db.Uuid
  createdAt     DateTime         @default(now())

  // Relations
  user1       User  @relation("User1Friendships", fields: [userId1], references: [userId])
  user2       User  @relation("User2Friendships", fields: [userId2], references: [userId])
  sender      User  @relation("senderFriendships", fields: [senderId], references: [userId])
  blockedUser User? @relation("blockedUserFriendships", fields: [blockedUserId], references: [userId])

  @@unique([userId1, userId2])
}

model ChatRoomMember {
  chatRoomId     String           @db.Uuid // Foreign key referencing ChatRoom
  userId         String           @db.Uuid // Foreign key referencing User
  userRole       ChatRole         @default(member)
  joinedAt       DateTime         @default(now()) @db.Timestamp(6)
  unreadCount    Int              @default(0)
  nickName       String?          @db.VarChar(50)
  // Relations
  chatRoom       ChatRoom         @relation(fields: [chatRoomId], references: [chatRoomId], onDelete: Cascade)
  user           User             @relation(fields: [userId], references: [userId], onDelete: Cascade)
  MessageReceipt MessageReceipt[]

  @@id([chatRoomId, userId])
  // Indexes and Unique Constraints
  @@unique([chatRoomId, userId]) // Ensures unique membership per chat room
  @@index([chatRoomId]) // Index on chatRoomId for quick lookups
  @@index([userId])
}

model MessageReaction {
  messageId    String   @db.Uuid // Foreign key referencing Message
  userId       String   @db.Uuid // Foreign key referencing User
  reactionType String   @db.VarChar(20)
  createdAt    DateTime @default(now()) @db.Timestamp(6)

  // Relations
  message Message @relation(fields: [messageId], references: [messageId], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@id([messageId, userId])
  @@index([messageId])
  @@index([userId])
}

model RecentActivity {
  recentActivityId             String   @id @default(uuid()) @db.Uuid
  userId                       String   @db.Uuid
  totalNewFriendRequests       Int      @default(0)
  totalNewUnseenChats          Int      @default(0)
  unseenAcceptedFriendRequests Int      @default(0)
  lastUpdated                  DateTime @default(now())

  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@unique([userId])
  @@index([userId])
}

model TokenFamily {
  familyId String   @id @default(uuid()) @db.Uuid
  userId   String   @db.Uuid
  issuedAt DateTime @default(now())
  isValid  Boolean  @default(false)

  user          User            @relation(fields: [userId], references: [userId])
  RefreshTokens RefreshTokens[]
}

model RefreshTokens {
  tokenId  String @id @default(uuid()) @db.Uuid
  userId   String @db.Uuid
  familyId String @db.Uuid

  tokenHash String @db.VarChar(256)

  issuedAt  DateTime @default(now())
  expiresAt DateTime

  isValid Boolean @default(true)

  user        User        @relation(fields: [userId], references: [userId])
  tokenFamily TokenFamily @relation(fields: [familyId], references: [familyId])

  @@unique([tokenHash])
}
