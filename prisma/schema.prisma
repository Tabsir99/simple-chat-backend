// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  offline
  online
  sleeping
  invisible
  away
}

enum ChatRole {
  member
  admin
  bot
}

enum MessageStatus {
  sent
  delivered
  seen
  failed
}

enum MessageType {
  user
  system
  call
}

model User {
  userId         String   @id @default(uuid()) @db.Uuid
  username       String   @db.VarChar(50)
  email          String   @unique @db.VarChar(200)
  createdAt      DateTime @default(now()) @db.Timestamp(6)
  profilePicture String?   @db.VarChar(250)
  bio            String?  @db.VarChar(500)

  lastActive DateTime   @default(now()) @db.Timestamp(6)
  userStatus UserStatus @default(offline)

  ChatRoomMember ChatRoomMember[]

  MessageReaction MessageReaction[]
  RecentActivity  RecentActivity?
  ChatRoom        ChatRoom[]

  MessageSender Message[]
  MessageTarget Message[] @relation("TargetUser")

  RefreshTokens RefreshTokens[]

  Caller          CallSession[]     @relation("CallerRelation")
  CallParticipant CallParticipant[]

  @@index([email])
  @@index([lastActive])
}

model ChatRoom {
  chatRoomId    String   @id @default(uuid()) @db.Uuid
  isGroup       Boolean  @default(false)
  roomName      String?  @db.VarChar(150)
  createdAt     DateTime @default(now()) @db.Timestamp(6)
  lastActivity  DateTime @default(now()) @db.Timestamp(6)
  lastMessageId String?  @db.Uuid
  createdBy     String?  @db.Uuid
  roomImage     String?

  Messages       Message[]
  ChatRoomMember ChatRoomMember[]

  lastMessage Message? @relation("LastMessage", fields: [lastMessageId], references: [messageId])
  creator     User?    @relation(fields: [createdBy], references: [userId])

  @@index([lastActivity])
}

enum AttachmentType {
  VIDEO
  VOICE
  DOCUMENT
  ARCHIVE
  AUDIO
  LINK
  IMAGE
}

model Message {
  messageId       String          @id @default(uuid()) @db.Uuid
  chatRoomId      String          @db.Uuid
  senderId        String?         @db.Uuid
  content         String?         @db.VarChar(2000)
  parentMessageId String?         @db.Uuid
  createdAt       DateTime        @default(now()) @db.Timestamp(6)
  isDeleted       Boolean         @default(false)
  isEdited        Boolean         @default(false)
  type            MessageType     @default(user)
  status          MessageStatus   @default(sent)
  targetUserId    String?         @db.Uuid
  attachment      AttachmentType?

  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [chatRoomId], onDelete: Cascade)
  sender     User?    @relation(fields: [senderId], references: [userId], onDelete: Cascade)
  targetUser User?    @relation("TargetUser", fields: [targetUserId], references: [userId])

  parentMessage Message? @relation("MessageReplies", fields: [parentMessageId], references: [messageId])

  Replies         Message[]         @relation("MessageReplies")
  MessageReaction MessageReaction[]

  LastMessageFor ChatRoom[]    @relation("LastMessage")
  CallSession    CallSession[]
}

model CallSession {
  callId      String     @id @default(uuid()) @db.Uuid
  callerId    String     @db.Uuid
  isVideoCall Boolean
  status      CallStatus
  messageId   String     @db.Uuid
  chatRoomId  String     @db.Uuid
  startTime   DateTime
  endTime     DateTime

  caller          User              @relation("CallerRelation", fields: [callerId], references: [userId])
  callMessage     Message           @relation(fields: [messageId], references: [messageId])
  CallParticipant CallParticipant[]
}

model CallParticipant {
  callId   String    @db.Uuid
  userId   String    @db.Uuid
  joinedAt DateTime
  leftAt   DateTime?

  user User        @relation(fields: [userId], references: [userId])
  call CallSession @relation(fields: [callId], references: [callId])

  @@id([callId, userId])
}

enum CallStatus {
  missed
  ongoing
  ended
}

model ChatRoomMember {
  chatRoomId String   @db.Uuid // Foreign key referencing ChatRoom
  userId     String   @db.Uuid // Foreign key referencing User
  userRole   ChatRole @default(member)

  unreadCount       Int       @default(0)
  lastReadMessageId String?
  readAt            DateTime?

  nickName String @db.VarChar(50)

  joinedAt      DateTime  @default(now()) @db.Timestamp(6)
  removedAt     DateTime?
  chatClearedAt DateTime?
  // Relations
  chatRoom      ChatRoom  @relation(fields: [chatRoomId], references: [chatRoomId], onDelete: Cascade)
  user          User      @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@id([chatRoomId, userId])
  // Indexes and Unique Constraints
  @@unique([chatRoomId, userId]) // Ensures unique membership per chat room
  @@index([chatRoomId]) // Index on chatRoomId for quick lookups
  @@index([userId])
}

model MessageReaction {
  messageId    String   @db.Uuid // Foreign key referencing Message
  userId       String   @db.Uuid // Foreign key referencing User
  reactionType String   @db.VarChar(20)
  createdAt    DateTime @default(now()) @db.Timestamp(6)

  // Relations
  message Message @relation(fields: [messageId], references: [messageId], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@id([messageId, userId])
  @@index([messageId])
  @@index([userId])
}

model RecentActivity {
  recentActivityId    String   @id @default(uuid()) @db.Uuid
  userId              String   @db.Uuid
  totalNewUnseenChats Int      @default(0)
  lastUpdated         DateTime @default(now())

  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@unique([userId])
  @@index([userId])
}

model RefreshTokens {
  tokenId String @id @default(uuid()) @db.Uuid
  userId  String @db.Uuid

  tokenHash String @db.VarChar(256)

  issuedAt  DateTime @default(now())
  expiresAt DateTime

  user User @relation(fields: [userId], references: [userId])

  @@unique([tokenHash])
}
